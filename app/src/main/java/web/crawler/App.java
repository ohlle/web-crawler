/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package web.crawler;

import me.tongfei.progressbar.ProgressBar;

import java.net.http.HttpClient;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.stream.Collectors;

public class App {

    private final static Set<String> fetchedLinks = new HashSet<>();
    private final static Set<String> toFetch = new HashSet<>();

    public static void main(String[] args) {
        //Break out of static spaghetti
        new App().run();
    }

    private PageFetcher pageFetcher;
    private PageSaver   pageSaver;
    private ProgressBar progressBar;

    public void run() {
        HttpClient httpClient = HttpClient.newHttpClient();
        String base = "https://tretton37.com";
        pageFetcher = new PageFetcher(httpClient, base);
        pageSaver = new PageSaver();
        progressBar = new ProgressBar("Fetching pages", 1);
        progressBar.start();

        toFetch.add("dummy"); //add a dummy to get the count correct, it's too late to find the error
        toFetch.add("/");
        final CompletableFuture<Page> pageFuture = pageFetcher.fetchSingle("/");
        pageFuture.thenAccept(this::findLinksAndFetch).join();
        progressBar.stop();
        System.out.println("Pages saved to " + pageSaver.getTmpPath().replace("file://", ""));
    }

    private void findLinksAndFetch(Page page) {
        LinkFinder linkFinder = new LinkFinder(page);
        final Set<String> links = filterLinks(linkFinder.relative().find());
        pageFetcher.fetch(links)
                .thenApply(this::addToFetchedLinks)
                .thenApply(pageSaver::save)
                .thenApply(pages -> {progressBar.step(); return pages;})
                .thenAccept(this::findLinksAndFetch).join();
    }

    private void findLinksAndFetch(List<Page> pages) {
        pages.stream().map(Page::getUrl).forEach(toFetch::add);
        progressBar.maxHint(toFetch.size());
        for (Page page : pages) {
            findLinksAndFetch(page);
        }
    }

    private List<Page> addToFetchedLinks(List<Page> pages) {
        for (Page page : pages) {
            fetchedLinks.add(page.getUrl());
        }
        return pages;
    }

    private  Set<String> filterLinks(Set<String> links) {
        return links.stream().filter(link -> !fetchedLinks.contains(link)).collect(Collectors.toSet());
    }
}
